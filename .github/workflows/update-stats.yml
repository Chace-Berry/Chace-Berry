name: Update Project Stats
on:
  schedule:
    - cron: '0 6 * * *' # Run daily at 6 AM UTC
  workflow_dispatch: # Allow manual trigger
  push:
    branches: [ main ]

jobs:
  update-stats:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Generate Project Cards SVG
        run: |
          mkdir -p output
          
          cat > generate-cards.js << 'EOF'
          const fs = require('fs');
          
          // Project configuration
          const projects = [
            {
              name: "Alterion-lang",
              repo: "Chace-Berry/Alterion-lang",
              description: "A modern, expressive programming language for native, web, and mobile apps.",
              logoLight: "https://raw.githubusercontent.com/Chace-Berry/Alterion-lang/main/assets/Logo_Dark.svg?v=1",
              logoDark: "https://raw.githubusercontent.com/Chace-Berry/Alterion-lang/main/assets/Logo.svg?v=1"
            }
          ];
          
          async function fetchRepoStats(repo) {
            try {
              const response = await fetch(`https://api.github.com/repos/${repo}`, {
                headers: { 'User-Agent': 'GitHub-Action' }
              });
              if (!response.ok) throw new Error(`HTTP ${response.status}`);
              const data = await response.json();
              return {
                stars: data.stargazers_count || 0,
                forks: data.forks_count || 0
              };
            } catch (error) {
              console.error(`Error fetching stats for ${repo}:`, error);
              return { stars: 0, forks: 0 };
            }
          }
          
          function generateSVG(isDark = false) {
            const bgColor = isDark ? '#0d1117' : '#ffffff';
            const textColor = isDark ? '#c9d1d9' : '#24292f';
            
            return `
          <svg width="800" height="540" viewBox="0 0 800 540" fill="none" xmlns="http://www.w3.org/2000/svg">
            <rect width="800" height="540" fill="${bgColor}"/>
            
            <!-- Card 1: Alterion-lang -->
            <rect x="20" y="20" width="760" height="230" rx="30" fill="url(#grad1)" stroke="rgba(255,255,255,0.1)" stroke-width="1"/>
            <rect x="20" y="20" width="180" height="230" rx="30" fill="url(#grad2)"/>
            
            <!-- Glow effect -->
            <circle cx="110" cy="135" r="40" fill="rgba(58, 123, 213, 0.3)"/>
            
            <!-- Logo placeholder -->
            <circle cx="110" cy="135" r="30" fill="${isDark ? '#ffffff' : '#4a4a4a'}" opacity="0.8"/>
            <text x="110" y="145" font-family="Arial, sans-serif" font-size="20" font-weight="bold" fill="${isDark ? '#0d1117' : '#ffffff'}" text-anchor="middle">A</text>
            
            <!-- Project info -->
            <text x="230" y="60" font-family="Arial, sans-serif" font-size="24" font-weight="700" fill="${textColor}">Alterion-lang</text>
            <text x="230" y="85" font-family="Arial, sans-serif" font-size="14" fill="${textColor}" opacity="0.9">A modern, expressive programming language for native, web, and mobile apps.</text>
            
            <!-- Stats -->
            <rect x="230" y="200" width="80" height="30" rx="6" fill="rgba(88, 166, 255, 0.1)" stroke="#58a6ff" stroke-width="1"/>
            <text x="270" y="220" font-family="Arial, sans-serif" font-size="12" fill="#58a6ff" text-anchor="middle">‚≠ê 0</text>
            
            <rect x="320" y="200" width="80" height="30" rx="6" fill="rgba(88, 166, 255, 0.1)" stroke="#58a6ff" stroke-width="1"/>
            <text x="360" y="220" font-family="Arial, sans-serif" font-size="12" fill="#58a6ff" text-anchor="middle">üç¥ 0</text>
            
            <!-- Card 2: BonjourclassewebApp -->
            <rect x="20" y="270" width="760" height="230" rx="30" fill="url(#grad1)" stroke="rgba(255,255,255,0.1)" stroke-width="1"/>
            <rect x="20" y="270" width="180" height="230" rx="30" fill="url(#grad2)"/>
            
            <!-- Glow effect -->
            <circle cx="110" cy="385" r="40" fill="rgba(58, 123, 213, 0.3)"/>
            
            <!-- Logo -->
            <circle cx="110" cy="385" r="30" fill="${isDark ? '#ffffff' : '#4a4a4a'}" opacity="0.8"/>
            <text x="110" y="395" font-family="Arial, sans-serif" font-size="20" font-weight="bold" fill="${isDark ? '#0d1117' : '#ffffff'}" text-anchor="middle">B</text>
            
            <!-- Project info -->
            <text x="230" y="310" font-family="Arial, sans-serif" font-size="24" font-weight="700" fill="${textColor}">BonjourclassewebApp</text>
            <text x="230" y="335" font-family="Arial, sans-serif" font-size="14" fill="${textColor}" opacity="0.9">Your current web application project.</text>
            
            <!-- Stats -->
            <rect x="230" y="450" width="80" height="30" rx="6" fill="rgba(88, 166, 255, 0.1)" stroke="#58a6ff" stroke-width="1"/>
            <text x="270" y="470" font-family="Arial, sans-serif" font-size="12" fill="#58a6ff" text-anchor="middle">‚≠ê 0</text>
            
            <rect x="320" y="450" width="80" height="30" rx="6" fill="rgba(88, 166, 255, 0.1)" stroke="#58a6ff" stroke-width="1"/>
            <text x="360" y="470" font-family="Arial, sans-serif" font-size="12" fill="#58a6ff" text-anchor="middle">üç¥ 0</text>
            
            <defs>
              <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" style="stop-color:#4a4a4a;stop-opacity:1" />
                <stop offset="100%" style="stop-color:#2d2d2d;stop-opacity:1" />
              </linearGradient>
              <linearGradient id="grad2" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" style="stop-color:#1a1a1a;stop-opacity:1" />
                <stop offset="100%" style="stop-color:#0d1117;stop-opacity:1" />
              </linearGradient>
            </defs>
          </svg>`;
          }
          
          // Generate both dark and light versions
          fs.writeFileSync('output/project-cards-dark.svg', generateSVG(true));
          fs.writeFileSync('output/project-cards.svg', generateSVG(false));
          
          console.log('Project cards SVG generated successfully!');
          EOF
          
          node generate-cards.js
          
      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add output/
          git diff --staged --quiet || git commit -m "Update project cards SVG"
          git push
